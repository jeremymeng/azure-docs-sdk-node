### YamlMime:TSType
name: ServiceBusSessionReceiver
uid: '@azure/service-bus.ServiceBusSessionReceiver'
package: '@azure/service-bus'
summary: 'A receiver that handles sessions, including renewing the session lock.'
fullName: ServiceBusSessionReceiver
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: entityPath
    uid: '@azure/service-bus.ServiceBusSessionReceiver.entityPath'
    package: '@azure/service-bus'
    summary: Path of the entity for which the receiver has been created.
    fullName: entityPath
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'entityPath: string'
      return:
        type: string
        description: ''
  - name: isClosed
    uid: '@azure/service-bus.ServiceBusSessionReceiver.isClosed'
    package: '@azure/service-bus'
    summary: >-
      Returns `true` if either the receiver or the client that created it has
      been closed.
    fullName: isClosed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isClosed: boolean'
      return:
        type: boolean
        description: ''
  - name: receiveMode
    uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveMode'
    package: '@azure/service-bus'
    summary: The receive mode used to create the receiver.
    fullName: receiveMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'receiveMode: "peekLock" | "receiveAndDelete"'
      return:
        type: '"peekLock" | "receiveAndDelete"'
        description: ''
  - name: sessionId
    uid: '@azure/service-bus.ServiceBusSessionReceiver.sessionId'
    package: '@azure/service-bus'
    summary: The session ID.
    fullName: sessionId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sessionId: string'
      return:
        type: string
        description: ''
  - name: sessionLockedUntilUtc
    uid: '@azure/service-bus.ServiceBusSessionReceiver.sessionLockedUntilUtc'
    package: '@azure/service-bus'
    summary: >
      The time in UTC until which the session is locked.

      Every time `renewSessionLock()` is called, this time gets updated to
      current time plus the lock

      duration as specified during the Queue/Subscription creation.

      Will return undefined until a AMQP receiver link has been successfully set
      up for the session.
    fullName: sessionLockedUntilUtc
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sessionLockedUntilUtc: Date'
      return:
        type: Date
        description: ''
methods:
  - name: 'abandonMessage(ServiceBusReceivedMessage, [key: string]: any)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.abandonMessage'
    package: '@azure/service-bus'
    summary: >-
      The lock held on the message by the receiver is let go, making the message
      available again in

      Service Bus for another receive operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abandonMessage(message: ServiceBusReceivedMessage,
        propertiesToModify?: [key: string]: any)
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
        - id: propertiesToModify
          type: '[key: string]\: any'
          description: >
            The properties of the message to modify while abandoning the
            message.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: close()
    uid: '@azure/service-bus.ServiceBusSessionReceiver.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the receiver.

      Once closed, the receiver cannot be used for any further operations.

      Use the `createReceiver()` method on the ServiceBusClient to create a new
      Receiver.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: completeMessage(ServiceBusReceivedMessage)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.completeMessage'
    package: '@azure/service-bus'
    summary: Removes the message from Service Bus.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function completeMessage(message: ServiceBusReceivedMessage)'
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      deadLetterMessage(ServiceBusReceivedMessage, DeadLetterOptions & [key:
      string]: any)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.deadLetterMessage'
    package: '@azure/service-bus'
    summary: >-
      Moves the message to the deadletter sub-queue. To receive a deadletted
      message, create a new

      QueueClient/SubscriptionClient using the path for the deadletter
      sub-queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deadLetterMessage(message: ServiceBusReceivedMessage, options?:
        DeadLetterOptions & [key: string]: any)
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/service-bus.DeadLetterOptions" /> & [key: string]:
            any
          description: |
            The DeadLetter options that can be provided while
            rejecting the message.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'deferMessage(ServiceBusReceivedMessage, [key: string]: any)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.deferMessage'
    package: '@azure/service-bus'
    summary: >-
      Defers the processing of the message. Save the `sequenceNumber` of the
      message, in order to

      receive it message again in the future using the `receiveDeferredMessage`
      method.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deferMessage(message: ServiceBusReceivedMessage,
        propertiesToModify?: [key: string]: any)
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
        - id: propertiesToModify
          type: '[key: string]\: any'
          description: |
            The properties of the message to modify while deferring the message
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: getMessageIterator(GetMessageIteratorOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.getMessageIterator'
    package: '@azure/service-bus'
    summary: >-
      Returns an iterator that can be used to receive messages from Service Bus.

      If the iterator is not able to fetch a new message in over a minute,
      `undefined` will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMessageIterator(options?: GetMessageIteratorOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.GetMessageIteratorOptions" />
          description: >
            A set of options to control the receive operation.

            - `maxWaitTimeInMs`: The time to wait to receive the message in each
            iteration.

            - `abortSignal`: The signal to use to abort the ongoing operation.
      return:
        type: >-
          AsyncIterableIterator&lt;<xref
          uid="@azure/service-bus.ServiceBusReceivedMessage" />&gt;
        description: ''
  - name: getSessionState(OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.getSessionState'
    package: '@azure/service-bus'
    summary: >-
      Gets the state of the Session. For more on session states, see

      [| Session
      State](https://docs.microsoft.com/azure/service-bus-messaging/message-sessions#message-session-state)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSessionState(options?: OperationOptionsBase)'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        type: Promise&lt;any&gt;
        description: The state of that session
  - name: 'peekMessages(number, PeekMessagesOptions)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.peekMessages'
    package: '@azure/service-bus'
    summary: >-
      Peek the next batch of active messages (including deferred but not
      deadlettered messages) on the

      queue or subscription without modifying them.

      - The first call to `peekMessages()` fetches the first active message.
      Each subsequent call fetches the

      subsequent message.

      - Unlike a "received" message, "peeked" message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function peekMessages(maxMessageCount: number, options?:
        PeekMessagesOptions)
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to peek.
        - id: options
          type: <xref uid="@azure/service-bus.PeekMessagesOptions" />
          description: >
            Options that allow to specify the maximum number of messages to
            peek,

            the sequenceNumber to start peeking from or an abortSignal to abort
            the operation.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusReceivedMessage"
          />[]&gt;
        description: ''
  - name: 'receiveDeferredMessages(Long | Long[], OperationOptionsBase)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveDeferredMessages'
    package: '@azure/service-bus'
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long | Long[],
        options?: OperationOptionsBase)
      parameters:
        - id: sequenceNumbers
          type: 'Long | Long[]'
          description: >-
            The sequence number or an array of sequence numbers for the messages
            that need to be received.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusReceivedMessage"
          />[]&gt;
        description: >-
          A list of messages identified by the given sequenceNumbers or an empty
          list if no messages are found.
  - name: 'receiveMessages(number, ReceiveMessagesOptions)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveMessages'
    package: '@azure/service-bus'
    summary: >-
      Returns a promise that resolves to an array of messages received from
      Service Bus.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, options?:
        ReceiveMessagesOptions)
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to receive.
        - id: options
          type: <xref uid="@azure/service-bus.ReceiveMessagesOptions" />
          description: >-
            A set of options to control the receive operation.

            - `maxWaitTimeInMs`: The maximum time to wait for the first message
            before returning an empty array if no messages are available.

            - `abortSignal`: The signal to use to abort the ongoing operation.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusReceivedMessage"
          />[]&gt;
        description: A promise that resolves with an array of messages.
  - name: renewMessageLock(ServiceBusReceivedMessage)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.renewMessageLock'
    package: '@azure/service-bus'
    summary: >-
      Renews the lock on the message for the duration as specified during the
      Queue/Subscription

      creation.

      - Check the `lockedUntilUtc` property on the message for the time when the
      lock expires.

      - If a message is not settled (using either `complete()`, `defer()` or
      `deadletter()`,

      before its lock expires, then the message lands back in the
      Queue/Subscription for the next

      receive operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function renewMessageLock(message: ServiceBusReceivedMessage)'
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
      return:
        type: Promise&lt;Date&gt;
        description: New lock token expiry date and time in UTC format.
  - name: renewSessionLock(OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.renewSessionLock'
    package: '@azure/service-bus'
    summary: Renews the lock on the session.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function renewSessionLock(options?: OperationOptionsBase)'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: ''
      return:
        type: Promise&lt;Date&gt;
        description: ''
  - name: 'setSessionState(any, OperationOptionsBase)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.setSessionState'
    package: '@azure/service-bus'
    summary: >-
      Sets the state on the Session. For more on session states, see

      [| Session
      State](https://docs.microsoft.com/azure/service-bus-messaging/message-sessions#message-session-state)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setSessionState(state: any, options?: OperationOptionsBase)'
      parameters:
        - id: state
          type: any
          description: The state that needs to be set.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'subscribe(MessageHandlers, SubscribeOptions)'
    uid: '@azure/service-bus.ServiceBusSessionReceiver.subscribe'
    package: '@azure/service-bus'
    summary: Streams messages to message handlers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function subscribe(handlers: MessageHandlers, options?:
        SubscribeOptions)
      parameters:
        - id: handlers
          type: <xref uid="@azure/service-bus.MessageHandlers" />
          description: A handler that gets called for messages and errors.
        - id: options
          type: <xref uid="@azure/service-bus.SubscribeOptions" />
          description: Options for subscribe.
      return:
        type: Object
        description: >-
          An object that can be closed, sending any remaining messages to
          `handlers` and

          stopping new messages from arriving.
extends: <xref uid="@azure/service-bus.ServiceBusReceiver" />
